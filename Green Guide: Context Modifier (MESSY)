
// Checkout the repo examples to get an idea of other ways you can use scripting
// https://github.com/latitudegames/Scripting/blob/master/examples

// info.memoryLength is the length of the memory section of text.
// info.maxChars is the maximum length that text can be. The server will truncate the text you return to this length.

// This modifier re-implements Author's Note as an example.
const modifier = (text) => {
  
    console.log(info)
      console.log(info?.inputEvaluation)
      
      judge = ['Judgebot', 'EmpathyBot', 'KillBot', 'SantaBot', 'SuccessBot' ][cr(0, 3)]
      
state.evaluationBot = judge




  place = state.loc.charAt(0).toUpperCase() + state.loc.slice(1)
  tonec = state.tonec.charAt(0).toUpperCase() + state.tonec.slice(1)
theme = state.theme.charAt(0).toUpperCase() + state.theme.slice(1)

genre = state.genre.charAt(0).toUpperCase() + state.genre.slice(1)
subject= state.subject.charAt(0).toUpperCase() + state.subject.slice(1)



state.mood = "MAIN CHARACTER: "+ state.name+ ', ' + state.plotself + ". STYLE: " + tonec    +", " + theme +". GENRE: " + genre  + ". LOCATION: " + place +". PLOT: You " + state.plot +'. THEMES: ' +state.subject +'.'

      mood=state.mood
      mood = mood.replace(/, Australiana\./gi, " ")
       mood=mood.replace(/ genre:/gi, ". GENRE:")   
      mood = mood.replace(/undefined/gi, " ")
      mood = mood.replace(/  /gi, " ")
      mood = mood.replace(/  /gi, " ")
      mood = mood.replace(/ ,/gi, ",")
      mood = mood.replace(/,,/gi, ",")
            mood = mood.replace(/ \./gi, ".")
      mood = mood.replace(/:\./gi, ":")
            mood = mood.replace(/:\,/gi, ":")
            mood = mood.replace(/:\,/gi, ":")     
            
            mood = mood.replace(/\;\,/gi, ",")     
                        mood = mood.replace(/\,\,/gi, ",")     
            
      mood = mood.replace(/\.\./gi, ".")
      mood = mood.replace(/\. \./gi, ".")
            mood = mood.replace(/\, \./gi, ".")

            mood = mood.replace(/\,\./gi, ".")
            
               if(state.person==1){
                 mood = mood.replace(/You are/gi, "I'm")
                 mood = mood.replace(/your/gi, "my")
                 mood = mood.replace(/: you /gi, ": I ")
mood = mood.replace(/ you /gi, " me ")

                 
                 
               }
            
            state.mood=mood


    

  //state.mood = state.mood + ". NOTES: " + state.theme
  
  
//  +", " + state.theme 

//state.mood = "MAIN CHARACTER: "+ state.name+ ' - ' + state.protag + ". STYLE: " + state.tonec 



//             eee = [cr(1,3)]
//    if (eee == 1){state.message=state.mood}
            
            
state.mood=mood
if (state.define===true){
  mood = "The next paragraph is written like an extremely verbose, long-winded entry from an academic encyclopedia."
//  state.define=false
}
  const contextMemory = info.memoryLength ? text.slice(0, info.memoryLength) : ''
  const context = info.memoryLength ? text.slice(info.memoryLength) : text
  const lines = context.split("\n")
  if (lines.length > 2) {
    // Uncomment to use this!
     const authorsNote = mood
     lines.splice(-3, 0, `[Author's note: ${authorsNote}]`)
  }
  // Make sure the new context isn't too long, or it will get truncated by the server.
  const combinedLines = lines.join("\n").slice(-(info.maxChars - info.memoryLength))
  const finalText = [contextMemory, combinedLines].join("")
  return { text: finalText }
}


// Don't modify this part
modifier(text)
